//This file is generated by the AxiomREPL. DO NOT DIRECTLY EDIT THIS FILE!
//To make changes, go to https://repl.axiom.xyz/ and export a new circuit.
//
//                 _                 _____  ______ _____  _
//     /\         (_)               |  __ \|  ____|  __ \| |
//    /  \   __  ___  ___  _ __ ___ | |__) | |__  | |__) | |
//   / /\ \  \ \/ / |/ _ \| '_ ` _ \|  _  /|  __| |  ___/| |
//  / ____ \  >  <| | (_) | | | | | | | \ \| |____| |    | |____
// /_/    \_\/_/\_\_|\___/|_| |_| |_|_|  \_\______|_|    |______|
//
//

import {
  Halo2Lib,
  AxiomData,
  CircuitValue
} from "@axiom-crypto/experimental/halo2-js";
import { CircuitValue256 } from "@axiom-crypto/experimental/v2/circuit/CircuitValue256";
const defaultInputs = {
  blockNumber: 9610835,
  txIdx: 6,
  logIdx: 3
};
type CircuitInputType = typeof defaultInputs;
export interface CircuitInputs extends CircuitInputType {}
export interface CircuitValueInputs {
  blockNumber: CircuitValue;
  txIdx: CircuitValue;
  logIdx: CircuitValue;
}
const circuitFn = async (
  halo2Lib: Halo2Lib,
  axiomData: AxiomData,
  { blockNumber, txIdx, logIdx }: CircuitValueInputs
) => {
  const { add, and, or, log } = halo2Lib;
  const { getReceipt, getTx, addToCallback } = axiomData;
  // `Swap(address,uint256,uint256,uint256,uint256,address)` event schema
  const eventSchema =
    "0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67";

  // "blockNumber": 9610835,
  // "txIdx": 6,

  // specify and fetch the data you want Axiom to verify
  let receipt = getReceipt(blockNumber, txIdx);
  let receiptLog = receipt.log(logIdx); //get the log at index 3

  // get the topic at index 0 (event schema)
  let swapSchema = receiptLog.topic(0, eventSchema);

  // get the topic at index 2
  let swapTo = receiptLog.topic(2, eventSchema).toCircuitValue();

  // get the block number for receipt
  let blockNum = receipt.blockNumber().toCircuitValue();

  // get the `to` field of the transaction
  let tx = getTx(blockNumber, txIdx);
  let txTo = tx.to().toCircuitValue();

  addToCallback(swapSchema);
  addToCallback(swapTo);
  addToCallback(blockNum);
  addToCallback(txTo);

  log(swapSchema);
  log(swapTo);
  log(blockNum);
  log(txTo);
};
const config = {
  k: 12,
  numAdvice: 4,
  numLookupAdvice: 1,
  numInstance: 1,
  numLookupBits: 11,
  numVirtualInstance: 2
};
const vk = [
  2,
  12,
  0,
  0,
  0,
  0,
  6,
  0,
  0,
  0,
  191,
  144,
  159,
  184,
  249,
  75,
  110,
  18,
  1,
  55,
  205,
  115,
  43,
  53,
  88,
  150,
  138,
  78,
  215,
  25,
  200,
  245,
  128,
  176,
  227,
  78,
  161,
  158,
  85,
  10,
  77,
  21,
  64,
  9,
  108,
  196,
  186,
  164,
  104,
  18,
  182,
  9,
  238,
  143,
  60,
  163,
  251,
  37,
  235,
  80,
  118,
  184,
  77,
  250,
  169,
  225,
  151,
  173,
  183,
  183,
  227,
  138,
  132,
  31,
  1,
  120,
  149,
  25,
  140,
  201,
  253,
  55,
  229,
  161,
  77,
  65,
  105,
  93,
  23,
  124,
  143,
  29,
  176,
  175,
  87,
  154,
  25,
  207,
  187,
  177,
  90,
  128,
  115,
  67,
  253,
  32,
  14,
  196,
  229,
  119,
  85,
  124,
  173,
  242,
  6,
  236,
  243,
  63,
  242,
  100,
  200,
  213,
  138,
  4,
  40,
  157,
  235,
  21,
  224,
  195,
  82,
  38,
  112,
  118,
  74,
  17,
  78,
  45,
  8,
  67,
  223,
  166,
  41,
  215,
  228,
  154,
  105,
  246,
  81,
  143,
  74,
  32,
  89,
  219,
  122,
  231,
  111,
  9,
  81,
  242,
  55,
  225,
  10,
  212,
  230,
  104,
  83,
  10,
  52,
  27,
  77,
  67,
  81,
  152,
  242,
  91,
  172,
  200,
  134,
  198,
  121,
  57,
  139,
  46,
  32,
  196,
  66,
  218,
  65,
  229,
  64,
  197,
  47,
  62,
  176,
  112,
  1,
  252,
  132,
  170,
  182,
  8,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  254,
  57,
  188,
  164,
  209,
  185,
  241,
  241,
  17,
  219,
  248,
  162,
  128,
  199,
  254,
  75,
  75,
  82,
  162,
  221,
  233,
  47,
  229,
  64,
  110,
  176,
  42,
  80,
  158,
  102,
  56,
  6,
  211,
  163,
  173,
  205,
  74,
  99,
  106,
  175,
  68,
  117,
  137,
  35,
  92,
  185,
  201,
  219,
  144,
  82,
  22,
  199,
  122,
  41,
  202,
  172,
  36,
  218,
  76,
  64,
  0,
  129,
  172,
  17,
  57,
  189,
  60,
  115,
  63,
  197,
  76,
  241,
  177,
  163,
  128,
  84,
  213,
  30,
  195,
  101,
  185,
  211,
  211,
  70,
  162,
  46,
  91,
  189,
  169,
  251,
  89,
  14,
  141,
  99,
  203,
  15,
  23,
  152,
  2,
  121,
  208,
  139,
  59,
  140,
  155,
  165,
  241,
  175,
  52,
  131,
  253,
  31,
  239,
  190,
  31,
  194,
  73,
  69,
  89,
  146,
  218,
  178,
  1,
  112,
  15,
  251,
  26,
  19,
  129,
  32,
  221,
  160,
  2,
  15,
  131,
  249,
  95,
  54,
  190,
  51,
  37,
  210,
  75,
  10,
  123,
  164,
  170,
  220,
  46,
  2,
  32,
  0,
  126,
  162,
  161,
  23,
  118,
  254,
  8,
  8,
  145,
  202,
  133,
  199,
  119,
  206,
  57,
  43,
  71,
  250,
  177,
  202,
  247,
  247,
  49,
  208,
  24,
  55,
  134,
  206,
  167,
  14,
  195,
  5,
  67,
  75,
  229,
  119,
  93,
  216,
  75,
  48,
  129,
  127,
  109,
  132,
  109,
  219,
  168,
  23,
  159,
  8,
  162,
  147,
  15,
  247,
  240,
  86,
  108,
  80,
  248,
  240,
  65,
  159,
  237,
  247,
  215,
  190,
  191,
  70,
  240,
  218,
  95,
  15,
  139,
  84,
  196,
  177,
  252,
  158,
  196,
  233,
  173,
  21,
  59,
  139,
  120,
  126,
  241,
  79,
  176,
  156,
  21,
  225,
  98,
  163,
  218,
  200,
  210,
  106,
  88,
  71,
  32,
  119,
  134,
  30,
  248,
  17,
  160,
  55,
  121,
  168,
  124,
  85,
  5,
  232,
  156,
  11,
  224,
  89,
  116,
  78,
  181,
  45,
  120,
  198,
  223,
  203,
  156,
  189,
  160,
  140,
  117,
  105,
  10,
  53,
  212,
  37,
  140,
  202,
  224,
  95,
  204,
  114,
  5,
  234,
  227,
  19,
  84,
  3,
  218,
  83,
  80,
  10,
  207,
  66,
  72,
  41,
  104,
  80,
  210,
  173,
  6,
  147,
  3,
  3,
  204,
  9,
  218,
  43,
  174,
  194,
  117,
  30,
  170,
  200,
  139,
  75,
  207,
  121,
  105,
  204,
  163,
  229,
  71,
  190,
  189,
  137,
  61,
  63,
  117,
  26,
  188,
  5,
  138,
  247,
  97,
  182,
  70,
  171,
  242,
  29,
  174,
  247,
  17,
  195,
  148,
  156,
  111,
  89,
  153,
  156,
  248,
  208,
  177,
  44,
  124,
  37,
  103,
  0,
  230,
  236,
  103,
  53,
  4,
  151,
  11,
  186,
  176,
  118,
  194,
  218,
  216,
  31,
  149,
  85,
  184,
  20,
  86,
  239,
  11,
  51,
  252,
  89,
  205,
  236,
  255,
  60,
  148,
  139,
  123,
  95,
  197,
  149,
  126,
  102,
  104,
  129,
  31,
  78,
  101,
  16,
  94,
  186,
  145,
  21,
  119,
  152,
  170,
  66,
  123,
  160,
  144,
  58,
  240,
  125,
  78,
  234,
  204,
  205,
  207,
  59,
  132,
  60,
  175,
  23,
  255,
  55,
  30,
  169,
  116,
  123,
  225,
  70,
  189,
  253,
  210,
  40
];
export const circuit = Object.freeze({
  circuit: circuitFn,
  config,
  defaultInputs,
  vk
});
